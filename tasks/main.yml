---
# tasks file for ansible-linux-common

# vim:ts=2:sw=2

- name: "Install packages for RHEL-based OS"
  package:
      name: "{{ packages.base.rh_common }}"
      state: present
  become: True
  when: "(ansible_os_family == 'RedHat') or (ansible_os_family == 'Rocky')"

- name: "Install packages for RHEL (not the testing distributions)"
  package:
      name: "{{ packages.base.rhel }}"
      state: present
  become: True
  when: "(ansible_os_family == 'RedHat') and not (ansible_distribution == 'Fedora')"

- name: "Install packages for Debian-based OS"
  package:
      name: "{{ packages.base.debian }}"
      state: present
      update_cache: True #TODO: Check if neccesary
  become: True
  when: "(ansible_os_family == 'Debian') or (ansible_os_family == 'Ubuntu')"

- name: "Install packages common for all hosts"
  package:
      name: "{{ packages.base.common }}"
      state: present
  become: True

- name: "Install packages for RHEL-hosts that use interactive shell"
  package:
      name: "{{ packages.tty.rh_common }}"
      state: present
  become: True
  when: "(ansible_os_family == 'RedHat') or (ansible_os_family == 'Rocky')"

- name: "Install packages for Debian-hosts that use interactive shell"
  package:
      name: "{{ packages.tty.debian }}"
      state: present
  become: True
  when: "(ansible_os_family == 'Debian') or (ansible_os_family == 'Ubuntu')"

- name: "Install packages for all hosts that use interactive shell"
  package:
      name: "{{ packages.tty.common }}"
      state: present
  become: True
  #when: "(ansible_os_family == 'RedHat') or (ansible_os_family == 'Rocky')"

- name: "Set the timezone"
  timezone:
    name: "{{ default_timezone }}" #FIXME Set to system running the role?
  become: True

# If this is a virtualized system time is most likely managed by the hypervisor
- name: "Check if system is virtualized"
  command:
    cmd: "systemd-detect-virt"
  become: True
  changed_when: False
  failed_when: False # Returns false if no virtualization found
  register: is_virtual_output

- set_fact: # Focusing on LXC for now, had no problems with KVM
    is_not_virtualized: "'lxc' not in is_virtual_output.stdout"
    chrony_config: "/etc/chrony.conf"

- set_fact:
    chrony_config: "/etc/chrony/chrony.conf"
  when: "(ansible_os_family == 'Debian') or (ansible_os_family == 'Ubuntu')"


#TODO: Check if NTP already configured
- name: "Configure Chronyd (NTP) with timesync servers"
  check_mode: True
  register: chrony_already_configured_check
  blockinfile:
    path: "{{ chrony_config }}"
    insertafter: "^(#)?pool.*"
    block: "{{ ntp_time_servers }}"
  become: True
  notify: "Restart chronyd"
  when: is_not_virtualized

- set_fact: # Check if we did the changes in a prior sweep
    chrony_not_already_configured: "{{ chrony_already_configured_check.changed }}"

- name: "Comment out lines starting with 'pool' or 'server'"
  lineinfile:
    path: "{{ chrony_config }}"
    regexp: '^(pool.*|server.*)'
    line: '#\1'
    backrefs: True
  become: True
  notify: "Restart chronyd"
  when: is_not_virtualized and chrony_not_already_configured

- name: "Configure Chronyd (NTP) with timesync servers"
  blockinfile:
    path: "{{ chrony_config }}"
    insertafter: "^(#)?pool.*"
    block: "{{ ntp_time_servers }}"
  become: True
  notify: "Restart chronyd"
  when: is_not_virtualized and chrony_not_already_configured

- name: "Start and enable chronyd (NTP)"
  service:
    name: "chronyd"
    state: started
    enabled: True
  become: True
  when: is_not_virtualized and chrony_not_already_configured

#TODO:
#- name: Create a sudo user
#- name: Create a ansible user

    #- name: "Copy fail2ban config"
    #  copy:
    #      src: "fail2ban.jail.local"
    #      dest: "/etc/fail2ban/jail.local"
    #      owner: root
    #      group: root
    #      mode: 660
    #  become: True
    #  notify: "Restart fail2ban"
    #
    #- name: "Enable fail2ban service"
    #  service:
    #      name: "fail2ban"
    #      state: "started"
    #      enabled: "True"
    #  become: True
    #  notify: "Restart fail2ban"
    #  ignore_errors: True # System might not have SSH
    #- name: "Create user"
    #  user:
    #    name: "{{ user }}"
    #    state: "present"
    #  become: True

# TODO: Move to personaliztion role
    #- name: "Deploy dotfiles"
    #  git:
    #    repo: "https://github.com/harahauk/dotfiles.git"
    #    dest: "/home/{{ user }}/.config/dotfiles"
    #    recursive: yes
    #    accept_hostkey: yes
    #  become: True
    #  become_user: "{{ user }}"
    #
    #- name: "Symlink dotfiles"
    #  file:
    #    src: "/home/{{ user }}/.config/dotfiles/{{ item }}"
    #    dest: "/home/{{ user }}/{{ item }}"
    #    state: link
    #    force: yes
    #  with_items:
    #    - ".vim"
    #    - ".vimrc"
    #    - ".screenrc"
    #    - ".bashrc"
    #  become: True
    #  become_user: "{{ user }}"
    #
    #- name: "Symlink bashrc to bash_profile"
    #  file:
    #      src: "/home/{{ user }}/.config/dotfiles/.bashrc"
    #      dest: "/home/{{ user }}/.bash_profile"
    #      state: link
    #      force: yes
    #  become: True
    #  become_user: "{{ user }}"
